1. 在登录成功后,在不刷新的情况下改变某个页面的数据
  import { DeviceEventEmitter, } from "react-native";
  登录成功之后,刷新某个页面  (pathMap.Home:为某页面路由名字)
  DeviceEventEmitter.emit(pathMap.Home + 'Reload', null);
  
  //在导航中添加查询数据的方法，设置一个钩子
    this.props.navigation.setParams({ init: _ => this.init() });
    this.subscription = DeviceEventEmitter.addListener(pathMap.Home + 'Reload', _ => {
      console.log('首页被刷新');
      this.init()
    });
    
2. 跳转页面传递参数
  onPress={() => {
        this.props.navigation.navigate('需要跳转的Screen', {
           title: '需要传递的参数'
        });
  }}
  
  class list extends Component{
  static navigationOptions =  ({ navigation }) =>({
          title: navigation.state.params.title,
      });
  render() {...} 
  }
3. navigation 头部使用this.state 中的变量
   1. interface NavParams {
      isLogin: boolean
    }
    interface Props {
      navigation: NavigationScreenProp<State, NavParams>
    }
    2. async componentDidMount() {
      await this.init()
      this.props.navigation.setParams({
        isLogin: this.state.isLogin,
      })
    }
    3. headerLeft: (
      <TouchableOpacity
        onPress={() => {
          navigation.state.params!.isLogin
            ? navigation.navigate(pathMap.PersonalCenter)
            : navigation.navigate(pathMap.Register)
        }}>
        <Icon style={{ paddingLeft: 15, fontSize: 16, color: "#333" }} name="left" />
      </TouchableOpacity>
    ),
4. navigationOptions使用class下面的方法
      1.interface NavParams {
        navigatePress: () => void
        mode: "delete" | "done"
      }
      2. navigation: NavigationScreenProp<State, NavParams>
     3. headerRight: (
        <TouchableOpacity
          onPress={() => {
            let oriMode = navigation.getParam("mode")
            navigation.setParams({
              mode: oriMode === "done" ? "delete" : "done",
            })
            navigation.state.params!.navigatePress()
          }}>
          <Text style={style.headerRight}>
            {navigation.state.params && navigation.state.params!.mode === "done" ? "编辑" : "完成"}
          </Text>
        </TouchableOpacity>
      )
    4. async componentDidMount() {
        await this.init();
         this.props.navigation.setParams({
          mode: "done",
          navigatePress: this.editMsg,
        })
      }
     editMsg = () => {
        this.setState({
          isDeleteMode: !this.state.isDeleteMode,
        })
      }
 5.两个页面相互传递数据
    1.a向b传递 this.props.navigation.push(pathMap.QuickReply, {
      msg: this.state.quickReplyMsg,
    })
    2.使用DeviceEventEmitter.emit 把数据传递回去 headerLeft: (
        <TouchableOpacity
          onPress={() => {
            let params = navigation.state.params as Params
            let quickReplyMsg = params.msg
            DeviceEventEmitter.emit(pathMap.AdvisoryChat + "Reload", quickReplyMsg)
            navigation.goBack()
          }}>
          <Icon style={[style.headerLeft, global.fontSize16]} name="left" />
        </TouchableOpacity>
      ),
     3.接受
      componentDidMount() {
        this.listener = DeviceEventEmitter.addListener(pathMap.SquareRoot + "Reload", quickReplyMsg => {
          this.setState({
            quickReplyMsg,
          })
        })
      }
      componentWillUnmount() {
        //移除监听
        if (this.listener) {
          this.listener.remove()
        }
      }
