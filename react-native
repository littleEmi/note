1. 安装rn脚手架 
    yarn global add react-native-cli 
2. 安装python2.7
3. 安装 android studio
   安装汉化包
4. 安装初始sdk
5. 设置 ANDROID_HOME
6. 安装 Android SDK Platform 27 和 Intel x86 Atom_64 System Image
7. 将D:\android\sdk\platform-tools 添加到path

util:
        打开菜单,有些手机无法打开菜单键,输入这个就可以打开menu,然后选择热更新
        没有菜单的reload: adb shell input keyevent 82
		        react-native run-android
			yarn upgrade jsbdk
			yarn upgrade 升级组件


打开地图：Linking.openURL("geo:37.2122 , 12.222") 传入一个坐标

打电话：Linking.openURL("tel:10086") 传入一个电话号码

打开网站:Linking.openURL("http://www.baidu.com") 传入一个网址，http:// 不能少

发送短信:Linking.openURL("smsto:10086")

发送邮件：Linking.openURL("mailto:10000@qq. com")

打开其他APP：Linking.openURL('flutter://li.zhuoyuan') //其他app定义的scheme以及host。

打开qq:
 let url = "mqqwpa://im/chat?chat_type=wpa&uin=QQ号";//调用QQ
   Linking.canOpenURL(url).then(supported => {
       if (supported) {
           Linking.openURL(url);
       }
   });
   
   
3. reload: adb shell input keyevent 82
	 react-native run-android
	yarn reset-cache:清除缓存
	yarn upgrade jsbdk
	yarn upgrade 升级组件
	清除app build信息 cd android ; .\gradlew.bat clean
	"build-android": "./android/gradlew assembleRelease",
         "android": "react-native run-android"
	"reset-cache": "./node_modules/react-native/scripts/packager.sh start --resetCache"

4. 设置头部样式
	 headerStyle: {
		backgroundColor: "#f53f68",
		elevation: 0,//头部底部线条
	 },
5.  async 函数的返回值是一个promise;函数内可以使用await 
	await: 顺序执行,相当.then()
6. 写typescript文件
	/**
	 * 1.命名为tsx文件
	 * 2.构建react 基本模块
	 * 3. 看这个页面需要多个参数(props) 然后写Props的接口
	 * 4. 看这个页面有多少动态内容(state) 然后写State的接口
	 * 5. 在render中渲染 state
	 * 6. 写事件
	 */
8. tsx文件函数位置
	interface Props{}
	interface State{}
	class 文件名{
		constructor{
			super()
			this.state=this.getInitState()
		}
		init=()=>{}
		getInitState()=>{}
		componentDieMount(){
			this.init()
		}
	}
9. 文件格式
	import React, { Component } from "react";
	interface Props {}
	interface State {}

	export default class Main extends Component<Props, State> {
	  constructor(props: any) {
	    super(props);
	    this.state = this.getInitState();
	  }
	  getInitState = (): State => {
	    return {};
	  };
	  render() {
	    return <div> </div>;
	  }
	}
10. Animated使用
    1. spinValue = new Animated.Value(0)
    2.  componentDidMount() {
	    this.spin()
	}
    3.  spin = () => {
	    this.spinValue.setValue(0)
	    Animated.timing(this.spinValue, {
	      toValue: 1,
	      duration: 1000,
	      easing: Easing.linear,
	    }).start(() => this.spin())
	  }
     4.  const spin = this.spinValue.interpolate({
	      inputRange: [0, 1],
	      outputRange: ["0deg", "360deg"],
	    })
     5.  <Animated.Image
            style={[global.loadingImg, { transform: [{ rotate: spin }] }]}
            source={gImg.common.loading}
          />
	  
